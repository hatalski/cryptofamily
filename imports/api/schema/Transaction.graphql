enum TransactionStatus {
    UNCONFIRMED, CONFIRMED
}

type Address {
    owner: Trader!
    address: String!
}

type Trader {
    nick: String!
}

type Transaction {
    _id: String!
    transactionId: String!
    currency: String!
    amount: Float!
    addressFrom: String!
    addressTo: String!
    timestamp: String
    fee: Float
    status: TransactionStatus
}

input TransactionInput {
    transactionId: String!
    currency: String!
    amount: Float!
    addressFrom: String!
    addressTo: String!
    timestamp: String!
    fee: Float
    status: TransactionStatus
}

extend type Query {
    transaction: Transaction
    transactions: [Transaction]
}

extend type Mutation {
    createTransaction(transaction: TransactionInput!): Transaction
    # createTransaction(symbol: String!, amount: Float!): Transaction
}

extend type Subscription {
    transactionCreated(transactionId: ID!): Transaction
}