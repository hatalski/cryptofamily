type Account {
    id: ID!
    publicKey: String!
    nounce: String
    hashedPassword: String
}

enum TradeType {
    BUY, SELL
}

enum TransactionType {
    DEPOSIT, WITHDRAWAL
}

type TradeFee {
    symbol: String!
    amount: Float!
}

type Trader {
    nick: String!
}

type Address {
    owner: Trader!
    address: String!
}

type TradeOperation {
    trader: Trader!
    exchange: String!
    exchangeInternalId: String
    timestamp: String!
    pair: String!
    type: TradeType!
    boughtAmount: Float!
    soldAmount: Float!
    rate: Float!
    fee: TradeFee
    comment: String
}

type Transaction {
    id: ID!,
    account: Account!
    trader: Trader!
    timestamp: String!
    transactionId: String!
    symbol: String!
    addressFrom: Address!
    addressTo: Address!
    amount: Float!
    fee: Float!
    status: String
    type: TransactionType!
}

# Type returned when the user logs in
type LoginMethodResponse {
  # Id of the account authenticated
  id: String!
  # Token of the connection
  token: String!
  # Expiration date for the token
  tokenExpires: Float!
  # The logged in account user
  account: Account
}

# A hashsed password
input HashedPassword {
  # The hashed password
  digest: String!
  # Algorithm used to hash the password
  algorithm: String!
}

input TransactionInput {
    transactionId: String!
    timestamp: String!
    symbol: String!
    addressFrom: String! 
    addressTo: String!
    amount: Float!
    fee: Float!
    status: String
    type: String!
}

type Mutation {
    createAccount(publicKey: String, password: HashedPassword): Account
    addTransaction(input: TransactionInput): Transaction
}

type Subscription {
	accountCreated(id: ID!): Account
}

type Query {
    transactions: [Transaction]
    operations: [TradeOperation]
    account: Account
    operation: TradeOperation
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}